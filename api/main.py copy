import os
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import qrcode
from io import BytesIO

from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient
from azure.storage.blob import BlobServiceClient, ContentSettings
from azure.storage.blob import PublicAccess


from azure.storage.blob import generate_blob_sas, BlobSasPermissions
from datetime import datetime, timedelta


app = FastAPI()

# CORS setup
origins = [
    "http://localhost:3000"
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Get Key Vault name from env (e.g., passed via Docker or Azure settings)
key_vault_name = os.getenv("AZURE_KEY_VAULT_NAME")
if not key_vault_name:
    raise RuntimeError("AZURE_KEY_VAULT_NAME environment variable not set.")

key_vault_uri = f"https://{key_vault_name}.vault.azure.net"

# Azure Blob Configuration
credential = DefaultAzureCredential()
secret_client = SecretClient(vault_url=key_vault_uri, credential=credential)

try:
    AZURE_CONN_STR = secret_client.get_secret("AZURE-STORAGE-CONNECTION-STRING").value
    CONTAINER_NAME = secret_client.get_secret("AZURE-CONTAINER-NAME").value
except Exception as e:
    import traceback
    print("‚ùå Error uploading to blob:")
    traceback.print_exc()  # shows full stack trace in terminal
    raise HTTPException(status_code=500, detail=f"Blob upload failed: {str(e)}")

blob_service_client = BlobServiceClient.from_connection_string(AZURE_CONN_STR)
container_client = blob_service_client.get_container_client(CONTAINER_NAME)

@app.post("/generate-qr/")
async def generate_qr(url: str):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(url)
    qr.make(fit=True)

    img = qr.make_image(fill_color="black", back_color="white")

    img_byte_arr = BytesIO()
    img.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)

    file_name = f"qr_codes/{url.split('//')[-1].replace('/', '_')}.png"

    try:
        blob_client = container_client.get_blob_client(file_name)
        blob_client.upload_blob(
            img_byte_arr,
            blob_type="BlockBlob",
            content_settings=ContentSettings(content_type='image/png'),
            overwrite=True  
        )
        blob_url = blob_client.url
        return {"qr_code_url": blob_url}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Blob upload failed: {str(e)}")
